//
//  ProtocolExtractor.swift
//  DependencyInjectionHelperForXcode
//
//  Created by Kazuhiro Hayashi on 2021/01/17.
//  
//

import Foundation
import SwiftSyntax

struct GeneratedProtocolDeclSyntax {
    let protocolDeclSyntax: ProtocolDeclSyntax
    let prefixComment: String
}

class ProtocolExtractor: SyntaxVisitor {
    
    var protocolDeclSyntaxList = [GeneratedProtocolDeclSyntax]()
    
    override func visit(_ node: ClassDeclSyntax) -> SyntaxVisitorContinueKind {
        guard !node.hasGenerics() else {
            return .skipChildren
        }
        
        let functions = node.members.members.compactMap { (member) -> FunctionDeclSyntax? in
            guard let functionDecl = member.decl.as(FunctionDeclSyntax.self) else {
                return nil
            }
            
            if functionDecl.hasGenerics() {
                return nil
            }
            
            let modifiers = functionDecl.modifiers
            
            let hasPrivate = modifiers?.contains(where: {
                $0.name.text == "private" || $0.name.text == "fileprivate"
            }) ?? false
            
            if hasPrivate {
                return nil
            }
            
            let hasOverride = modifiers?
                .contains { $0.name.text == "override" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .override),
               hasOverride {
                return nil
            }
            
            let isPublic = modifiers?
                .contains { $0.name.text == "public" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember),
               !isPublic {
                return nil
            }
            
            return functionDecl
        }
        let variables = node.members.members.compactMap { (member) -> VariableDeclSyntax? in
            member.decl.as(VariableDeclSyntax.self)
        }
        
        
        let initilizers = node.members.members.compactMap { (member) -> InitializerDeclSyntax? in
            guard let initializerDecl = member.decl.as(InitializerDeclSyntax.self) else {
                return nil
            }
            
            if initializerDecl.genericParameterClause != nil {
                return nil
            }

            let modifiers = initializerDecl.modifiers
            
            let hasPrivate = modifiers?.contains(where: {
                $0.name.text == "private" || $0.name.text == "fileprivate"
            }) ?? false
            if hasPrivate {
                return nil
            }
            
            let hasOverride = modifiers?
                .contains { $0.name.text == "override" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .override),
               hasOverride {
                return nil
            }
            
            let isPublic = modifiers?
                .contains { $0.name.text == "public" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember),
               !isPublic {
                return nil
            }
            
            return initializerDecl
        }
        
        let inheritanceClause: TypeInheritanceClauseSyntax = .make(with: .anyObject)
        
        let protocolDeclSyntax = makeProtocolDecl(
            attributes: node.attributes,
            identifier: node.identifier
                .withTrailingTrivia(.zero),
            inheritanceClause: inheritanceClause
                .withTrailingTrivia(.spaces(1)),
            varDecls: variables,
            funcDelcs: functions,
            initDecls: initilizers,
            isClass: true)
        
        let prefiComment = """
        /// protocol of \(node.identifier.text)
        ///
        /// It is generated by [Dependeny Injection Helper for Xcode](https://git.io/JtPLf)
        """
        
        let generatedProtocolDeclSyntax = GeneratedProtocolDeclSyntax(
            protocolDeclSyntax: protocolDeclSyntax,
            prefixComment: prefiComment)
        
        protocolDeclSyntaxList.append(generatedProtocolDeclSyntax)
        
        return .skipChildren
    }

    override func visit(_ node: StructDeclSyntax) -> SyntaxVisitorContinueKind {
        guard !node.hasGenerics() else {
            return .skipChildren
        }
        
        let functions = node.members.members.compactMap { (member) -> FunctionDeclSyntax? in
            guard let functionDecl = member.decl.as(FunctionDeclSyntax.self) else {
                return nil
            }
            
            if functionDecl.hasGenerics() {
                return nil
            }
            
            let modifiers = functionDecl.modifiers
            
            let hasPrivate = modifiers?.contains(where: {
                $0.name.text == "private" || $0.name.text == "fileprivate"
            }) ?? false
            
            if hasPrivate {
                return nil
            }
            
            let hasOverride = modifiers?
                .contains { $0.name.text == "override" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .override),
               hasOverride {
                return nil
            }
            
            let isPublic = modifiers?
                .contains { $0.name.text == "public" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember),
               !isPublic {
                return nil
            }
            
            return functionDecl
        }
        let variables = node.members.members.compactMap { (member) -> VariableDeclSyntax? in
            member.decl.as(VariableDeclSyntax.self)
        }
        let initilizers = node.members.members.compactMap { (member) -> InitializerDeclSyntax? in
            guard let initializerDecl = member.decl.as(InitializerDeclSyntax.self) else {
                return nil
            }
            
            if initializerDecl.genericParameterClause != nil {
                return nil
            }
            
            let modifiers = initializerDecl.modifiers
            
            let hasPrivate = modifiers?.contains(where: {
                $0.name.text == "private" || $0.name.text == "fileprivate"
            }) ?? false
            
            if hasPrivate {
                return nil
            }
            
            let hasOverride = modifiers?
                .contains { $0.name.text == "override" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .override),
               hasOverride {
                return nil
            }
            
            let isPublic = modifiers?
                .contains { $0.name.text == "public" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember),
               !isPublic {
                return nil
            }
            
            return initializerDecl
        }
        
        let protocolDeclSyntax = makeProtocolDecl(
            attributes: node.attributes,
            identifier: node.identifier
                .withTrailingTrivia(.spaces(1)),
            inheritanceClause: nil,
            varDecls: variables,
            funcDelcs: functions,
            initDecls: initilizers,
            isClass: true)
        
        let prefiComment = """
        /// protocol of \(node.identifier.text)
        ///
        /// It is generated by [Dependeny Injection Helper for Xcode](https://git.io/JtPLf)
        """
        
        let generatedProtocolDeclSyntax = GeneratedProtocolDeclSyntax(
            protocolDeclSyntax: protocolDeclSyntax,
            prefixComment: prefiComment)
        
        protocolDeclSyntaxList.append(generatedProtocolDeclSyntax)
        
        return .skipChildren
    }

    override func visit(_ node: EnumDeclSyntax) -> SyntaxVisitorContinueKind {
        guard !node.hasGenerics() else {
            return .skipChildren
        }
        
        let functions = node.members.members.compactMap { (member) -> FunctionDeclSyntax? in
            guard let functionDecl = member.decl.as(FunctionDeclSyntax.self) else {
                return nil
            }
            
            if functionDecl.hasGenerics() {
                return nil
            }
            
            let modifiers = functionDecl.modifiers
            
            let hasPrivate = modifiers?.contains(where: {
                $0.name.text == "private" || $0.name.text == "fileprivate"
            }) ?? false
            
            if hasPrivate {
                return nil
            }
            
            let hasOverride = modifiers?
                .contains { $0.name.text == "override" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .override),
               hasOverride {
                return nil
            }
            
            let isPublic = modifiers?
                .contains { $0.name.text == "public" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember),
               !isPublic {
                return nil
            }
            
            return functionDecl
        }
        let variables = node.members.members.compactMap { (member) -> VariableDeclSyntax? in
            member.decl.as(VariableDeclSyntax.self)
        }
        let initilizers = node.members.members.compactMap { (member) -> InitializerDeclSyntax? in
            guard let initializerDecl = member.decl.as(InitializerDeclSyntax.self) else {
                return nil
            }
            
            if initializerDecl.genericParameterClause != nil {
                return nil
            }
            
            let modifiers = initializerDecl.modifiers
            
            let hasPrivate = modifiers?.contains(where: {
                $0.name.text == "private" || $0.name.text == "fileprivate"
            }) ?? false
            
            if hasPrivate {
                return nil
            }
            
            let hasOverride = modifiers?
                .contains { $0.name.text == "override" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .override),
               hasOverride {
                return nil
            }
            
            let isPublic = modifiers?
                .contains { $0.name.text == "public" } ?? false
            if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember),
               !isPublic {
                return nil
            }
            
            return initializerDecl
        }
        
        let protocolDeclSyntax = makeProtocolDecl(
            attributes: node.attributes,
            identifier: node.identifier
                .withTrailingTrivia(.spaces(1)),
            inheritanceClause: nil,
            varDecls: variables,
            funcDelcs: functions,
            initDecls: initilizers,
            isClass: true)
        let prefiComment = """
        /// protocol of \(node.identifier.text)
        ///
        /// It is generated by [Dependeny Injection Helper for Xcode](https://git.io/JtPLf)
        """
        
        let generatedProtocolDeclSyntax = GeneratedProtocolDeclSyntax(
            protocolDeclSyntax: protocolDeclSyntax,
            prefixComment: prefiComment)
        
        protocolDeclSyntaxList.append(generatedProtocolDeclSyntax)
        
        return .skipChildren
    }
    
    private func makeProtocolDecl(
        attributes: AttributeListSyntax?,
        identifier: TokenSyntax,
        inheritanceClause: TypeInheritanceClauseSyntax?,
        varDecls: [VariableDeclSyntax],
        funcDelcs: [FunctionDeclSyntax],
        initDecls: [InitializerDeclSyntax],
        isClass: Bool) -> ProtocolDeclSyntax {
        
        var filterdVarDecls = varDecls
            .filter(\.notHasPrivateGetterSetter)
        
        if Settings.shared.protocolSettings.getIgnorance(ignorance: .internalMember) {
            filterdVarDecls = varDecls
                .filter(\.hasPublic)
        }

        if Settings.shared.protocolSettings.getIgnorance(ignorance: .override) {
            filterdVarDecls = varDecls
                .filter(\.notHasOverrdie)
        }
        
        let varInterfaces = Array(
            filterdVarDecls
                .map { $0.makeInterfaces() }
                .joined()
        )
        .map(\.toMemberDeclListItem)
        
        let initInterfaces = initDecls.map(\.interface).map(\.toMemberDeclListItem)
        let funcInterfaces = funcDelcs.compactMap(\.interface).map(\.toMemberDeclListItem)
        
        var memberInterfaces = [MemberDeclListItemSyntax]()
        if !Settings.shared.protocolSettings.getIgnorance(ignorance: .function) {
            memberInterfaces.append(contentsOf: funcInterfaces)
        }
        if !Settings.shared.protocolSettings.getIgnorance(ignorance: .storedProperty) {
            //TODO:-
        }
        if !Settings.shared.protocolSettings.getIgnorance(ignorance: .computedGetterSetterProperty) {
            memberInterfaces.append(contentsOf: varInterfaces)
        }
        if !Settings.shared.protocolSettings.getIgnorance(ignorance: .initializer) {
            memberInterfaces.append(contentsOf: initInterfaces)
        }
        
        let format = Settings.shared.protocolSettings.nameFormat ?? "%@Protocol"
        let formattedString = String(format: format, identifier.text)
        return SyntaxFactory.makeProtocolForDependencyInjection(
            attributes: attributes,
            identifier: identifier
                .withKind(
                    .stringLiteral(
                        formattedString
                    )
                ),
            inheritanceClause: inheritanceClause,
            members: SyntaxFactory.makeMemberDeclList(memberInterfaces)
        )
    }
    
}
